generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id        String   @id @default(uuid())
  name      String
  companyId String?
  email     String   @unique
  password  String
  phone     String?  @unique
  company   Company?
}

enum WeekDay {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

model BusinessHour {
  id        String  @id @default(uuid())
  day       WeekDay
  openTime  String
  closeTime String
  isActive  Boolean
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([companyId, day])
}

model Company {
  id            String         @id @default(uuid())
  name          String
  email         String?
  website       String?
  description   String?
  cnpj          String         @unique
  phone         String         @unique
  clients       Client[]
  conversations Conversation[]
  departments   Department[]
  employees     Employee[]
  faqs          FAQCategory[]
  managerId     String         @unique
  manager       Manager        @relation(fields: [managerId], references: [id])
  businessHours BusinessHour[]
}

model Client {
  id            String            @id @default(uuid())
  name          String
  email         String?
  profession    String?
  phone         String            @unique
  companyId     String
  company       Company           @relation(fields: [companyId], references: [id])
  conversations Conversation[]
  messages      Message[]
  queue         DepartmentQueue[]
}

model Employee {
  id                 String         @id @default(uuid())
  name               String
  phone              String         @unique
  companyId          String
  departmentId       String?
  company            Company        @relation(fields: [companyId], references: [id])
  department         Department?    @relation(fields: [departmentId], references: [id])
  messages           Message[]
  conversations      Conversation[] @relation("employee")
  agentConversations Conversation[] @relation("agent")
}

enum UserType {
  CLIENT
  EMPLOYEE
}

enum AgentType {
  EMPLOYEE
  AI
}

enum StateName {
  CHATTING_WITH_EMPLOYEE
  CHATTING_WITH_CLIENT
  CHATTING_WITH_AI
  DEPARTMENT_QUEUE
  SELECTING_DEPARTMENT
  LISTING_DEPARTMENT_QUEUE
  SELECTING_FAQ_CATEGORY
  LISTING_FAQ_ITEMS
  INITIAL_MENU
  BEGIN
}

enum CloseReason {
  EXPLICIT
  RESOLVED
  TRANSFERED
  ABANDONED
}

model Conversation {
  id                  String     @id @default(uuid())
  clientId            String?
  employeeId          String?
  userType            UserType
  agentType           AgentType?
  agentId             String?
  companyId           String
  currentState        StateName
  stateData           Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  startedAt           DateTime   @default(now())
  endedAt             DateTime?
  lastStateChange     DateTime?
  resume              String?
  entryActionExecuted Boolean
  client              Client?    @relation(fields: [clientId], references: [id])
  company             Company    @relation(fields: [companyId], references: [id])
  employee            Employee?  @relation("employee", fields: [employeeId], references: [id])
  agent               Employee?  @relation("agent", fields: [agentId], references: [id])
  messages            Message[]

  /**
   * for metrics
   */
  queuedAt             DateTime?
  firstHumanResponseAt DateTime?
  closeReason          CloseReason?
}

enum FromType {
  CLIENT
  EMPLOYEE
  AI
  SYSTEM
}

model Message {
  id             String       @id @default(uuid())
  content        String
  from           FromType
  timestamp      DateTime     @default(now())
  conversationId String
  aiResponseId   String?
  clientId       String?
  employeeId     String?
  client         Client?      @relation(fields: [clientId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  employee       Employee?    @relation(fields: [employeeId], references: [id])
}

model Department {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?           @default("")
  companyId   String
  company     Company           @relation(fields: [companyId], references: [id])
  employees   Employee[]
  queue       DepartmentQueue[]
}

model DepartmentQueue {
  id           String     @id @default(uuid())
  departmentId String
  clientId     String
  joinedAt     DateTime   @default(now())
  leftAt       DateTime?
  department   Department @relation(fields: [departmentId], references: [id])
  client       Client     @relation(fields: [clientId], references: [id])

  @@unique([departmentId, clientId])
  @@index([departmentId, joinedAt])
}

model FAQCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  items     FAQItem[]

  @@unique([companyId, name])
}

model FAQItem {
  id         String      @id @default(uuid())
  question   String
  answer     String
  categoryId String
  category   FAQCategory @relation(fields: [categoryId], references: [id])
}
